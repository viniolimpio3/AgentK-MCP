#!/bin/bash

# Script para testar a aplica√ß√£o AgentK com Docker
# Autor: Vin√≠cius
# Data: $(date)

set -e

echo "üöÄ AgentK Docker Setup Script"
echo "================================"

# Verificar se o Docker est√° instalado
if ! command -v docker &> /dev/null; then
    echo "‚ùå Docker n√£o encontrado! Por favor, instale o Docker primeiro."
    exit 1
fi

# Verificar se o Docker Compose est√° instalado
if ! command -v docker-compose &> /dev/null; then
    echo "‚ùå Docker Compose n√£o encontrado! Por favor, instale o Docker Compose primeiro."
    exit 1
fi

# Verificar se o arquivo .env existe
if [ ! -f .env ]; then
    echo "‚ö†Ô∏è Arquivo .env n√£o encontrado. Copiando .env.example..."
    cp .env.example .env
    echo "‚úÖ Arquivo .env criado! Por favor, configure sua OPENAI_API_KEY em .env"
    echo "üìù Editando .env..."
    
    # Tentar abrir editor padr√£o
    if command -v code &> /dev/null; then
        code .env
    elif command -v nano &> /dev/null; then
        nano .env
    elif command -v vim &> /dev/null; then
        vim .env
    else
        echo "Por favor, edite o arquivo .env manualmente e adicione sua OPENAI_API_KEY"
    fi
    
    echo "Pressione Enter quando terminar de configurar o .env..."
    read
fi

# Verificar se OPENAI_API_KEY est√° configurada
if ! grep -q "OPENAI_API_KEY=sk-" .env 2>/dev/null; then
    echo "‚ö†Ô∏è OPENAI_API_KEY n√£o parece estar configurada corretamente no .env"
    echo "Por favor, configure uma chave v√°lida da OpenAI"
    exit 1
fi

echo "‚úÖ Pr√©-requisitos verificados!"
echo ""

# Menu de op√ß√µes
echo "Escolha uma op√ß√£o:"
echo "1) Construir e executar (primeira vez)"
echo "2) Executar servi√ßos existentes"
echo "3) Parar servi√ßos"
echo "4) Ver logs"
echo "5) Rebuild completo"
echo "6) Limpeza completa"

read -p "Op√ß√£o [1-6]: " option

case $option in
    1)
        echo "üî® Construindo e executando pela primeira vez..."
        docker-compose up --build -d
        ;;
    2)
        echo "‚ñ∂Ô∏è Executando servi√ßos..."
        docker-compose up -d
        ;;
    3)
        echo "‚èπÔ∏è Parando servi√ßos..."
        docker-compose down
        ;;
    4)
        echo "üìã Mostrando logs..."
        docker-compose logs -f
        ;;
    5)
        echo "üîÑ Rebuild completo..."
        docker-compose down
        docker-compose build --no-cache
        docker-compose up -d
        ;;
    6)
        echo "üßπ Limpeza completa..."
        docker-compose down -v
        docker system prune -f
        docker volume prune -f
        ;;
    *)
        echo "‚ùå Op√ß√£o inv√°lida!"
        exit 1
        ;;
esac

if [ "$option" = "1" ] || [ "$option" = "2" ] || [ "$option" = "5" ]; then
    echo ""
    echo "üéâ Servi√ßos iniciados!"
    echo "================================"
    echo "üì± Streamlit Client: http://localhost:8501"
    echo "üîß MCP Server: http://localhost:3333/mcp"
    echo ""
    echo "Para ver logs em tempo real:"
    echo "docker-compose logs -f"
    echo ""
    echo "Para parar os servi√ßos:"
    echo "docker-compose down"
fi