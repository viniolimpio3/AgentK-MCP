name: Deploy to AWS VM

on:
  push:
    branches: [ master ]
  workflow_dispatch: 

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production 
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.AWS_VM_SSH_KEY }}
        
    - name: Add VM to known hosts
      run: |
        ssh-keyscan -H ${{ secrets.AWS_VM_HOST }} >> ~/.ssh/known_hosts
        
    - name: Deploy to VM
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.AWS_VM_USER }}@${{ secrets.AWS_VM_HOST }} << 'EOF'
          set -e
          echo "Iniciando deploy..."
          
          # Navegar para o diret√≥rio do projeto
          cd /home/${{ secrets.AWS_VM_USER }}/AgentK-MCP
          
          # Backup r√°pido (caso precise fazer rollback)
          docker-compose ps > /tmp/agentk_status_backup.txt
          
          # Atualizar c√≥digo
          echo "‚¨áAtualizando c√≥digo..."
          git fetch origin
          git reset --hard origin/master
          
          # Parar servi√ßos
          echo "Parando servi√ßos..."
          docker-compose down --remove-orphans
          
          # Rebuild e iniciar
          echo "Fazendo rebuild..."
          docker-compose build --no-cache
          docker-compose up -d
          
          # Limpeza
          echo "Limpando imagens n√£o utilizadas..."
          docker system prune -f
          
          echo "Deploy conclu√≠do!"
        EOF
        
    - name: Wait for services to start
      run: |
        echo "‚è≥ Aguardando servi√ßos iniciarem..."
        sleep 45
        
    - name: Health Check
      run: |
        echo "üè• Verificando sa√∫de da aplica√ß√£o..."
        
        # Verificar se containers est√£o rodando
        ssh ${{ secrets.AWS_VM_USER }}@${{ secrets.AWS_VM_HOST }} "docker-compose ps | grep Up"
        
        # Tentar conectar nos endpoints (com retry)
        for i in {1..5}; do
          echo "Tentativa $i/5..."
          if curl -f --max-time 10 http://${{ secrets.AWS_VM_HOST }}:3333/sse; then
            echo "Servidor MCP est√° respondendo"
            break
          fi
          if [ $i -eq 5 ]; then
            echo "Servidor MCP n√£o respondeu ap√≥s 5 tentativas"
            exit 1
          fi
          sleep 10
        done
        
        for i in {1..5}; do
          echo "Verificando Streamlit - Tentativa $i/5..."
          if curl -f --max-time 10 http://${{ secrets.AWS_VM_HOST }}:8501; then
            echo "Cliente Streamlit est√° respondendo"
            break
          fi
          if [ $i -eq 5 ]; then
            echo "Cliente Streamlit n√£o respondeu ap√≥s 5 tentativas"
            exit 1
          fi
          sleep 10
        done
        
    - name: Deployment Summary
      if: success()
      run: |
        echo "Deploy realizado com sucesso!"
        echo "Aplica√ß√£o dispon√≠vel em:"
        echo "   - Servidor MCP: http://${{ secrets.AWS_VM_HOST }}:3333"
        echo "   - Cliente Web: http://${{ secrets.AWS_VM_HOST }}:8501"